#.github/workflows/automation.yml
name : APPLICATION DEPLOYMENT

on: 
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write
  
env:
  awsAccountNumber: ${{ secrets.ADEX_POC}}
  awsRegion: 'us-east-1' 
  terraformBucket: adex-terraform-state
  terraformDynamo: adex-terraform-state
  terraformS3Acl: bucket-owner-full-control
  terraformS3Encryption: true 
  terraformBucketKey: "426857564226/main_prod.tfstate"
  depRegion: us-east-1

jobs:
  transfer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.awsAccountNumber }}:role/Github-OIDC-role
          role-session-name: OIDCSession
          aws-region: ${{ env.awsRegion }}

      - name: Terraform Initialize
        id: init
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform init -backend-config="bucket=${{ env.terraformBucket }}" -backend-config="dynamodb_table=${{ env.terraformDynamo }}" -backend-config="key=${{ env.terraformBucketKey}}" -backend-config="region=${{ env.awsRegion }}" -backend-config="acl=${{ env.terraformS3Acl }}" -backend-config="encrypt=${{ env.terraformS3Encryption }}"

      - name: Get the bucket name
        uses: mathiasvr/command-output@v1
        id: get-bucket-name
        with:
          run: |
            state_file_name=${{ env.terraformBucketKey }}
            aws s3 cp s3://${{ env.terraformBucket }}/${{ env.terraformBucketKey }} $state_file_name
            bucket_name=$(terraform output --json -state=$state_file_name | jq -r '.bucket_name.value')
            echo "BUCKET_NAME=$bucket_name" >> "$GITHUB_OUTPUT"

      - name: Create Environment
        run: |
          cat << EOF > .env
          # Twitter API credentials
          twitter_consumer_key =${{secrets.TWITTER_CONSUMER_KEY}}
          twitter_consumer_secret = ${{secrets.TWITTER_CONSUMER_SECRET}}
          twitter_access_token = ${{secrets.TWITTER_ACCESS_TOKEN}}
          twitter_access_token_secret = ${{secrets.TWITTER_ACCESS_TOKEN_SECRET}}
          twitter_bearer_token=${{secrets.TWITTER_BEARER_TOKEN}}

          # AWS credentials
          AWS_REGION=${{ env.depRegion }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_SESSION_TOKEN=
          

          #Linkedin API Credentials
          LINKEDIN_CLIENT_ID=${{ secrets.LINKEDIN_CLIENT_ID}}
          LINKEDIN_CLIENT_SECRET=${{ secrets.LINKEDIN_CLIENT_SECRET }}
          LINKEDIN_ACCESS_TOKEN=${{ secrets.LINKEDIN_ACCESS_TOKEN }}
          LINKEDIN_PERSON_URN=${{ secrets.LINKEDIN_PERSON_URN }}
          LINKEDIN_ORGANIZATION_URN=${{ secrets.LINKEDIN_ORGANIZATION_URN }}
          EOF


      - name: upload files to s3 bucket
        run : |
          aws s3 cp . s3://${{ steps.get-bucket-name.outputs.BUCKET_NAME }}/codebase --recursive --exclude ".git/*" --exclude ".github/*"


  copy:
    needs: transfer
    runs-on: ubuntu-latest
    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: creds
        with:
          role-to-assume: arn:aws:iam::${{ env.awsAccountNumber }}:role/Github-OIDC-role
          role-session-name: OIDCSession
          aws-region: ${{ env.awsRegion }}
          output-credentials: true

      - name: Terraform Initialize
        id: init
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform init -backend-config="bucket=${{ env.terraformBucket }}" -backend-config="dynamodb_table=${{ env.terraformDynamo }}" -backend-config="key=${{ env.terraformBucketKey}}" -backend-config="region=${{ env.awsRegion }}" -backend-config="acl=${{ env.terraformS3Acl }}" -backend-config="encrypt=${{ env.terraformS3Encryption }}"
  
      - name: Get the bucket_name
        uses: mathiasvr/command-output@v1
        id: get-bucket-name
        with:
          run: |
            state_file_name=${{ env.terraformBucketKey }}
            aws s3 cp s3://${{ env.terraformBucket }}/${{ env.terraformBucketKey }} $state_file_name
            bucket_name=$(terraform output --json -state=$state_file_name | jq -r '.bucket_name.value')
            echo "BUCKET_NAME=$bucket_name" >> "$GITHUB_OUTPUT"
    

      - name: Terraform Initialize
        id: init_two
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform init -backend-config="bucket=${{ env.terraformBucket }}" -backend-config="dynamodb_table=${{ env.terraformDynamo }}" -backend-config="key=${{ env.terraformBucketKey}}" -backend-config="region=${{ env.awsRegion }}" -backend-config="acl=${{ env.terraformS3Acl }}" -backend-config="encrypt=${{ env.terraformS3Encryption }}"

      - name: Get the instance-id
        uses: mathiasvr/command-output@v1
        id: get-instance-id
        with:
          run: |
            state_file_name=${{ env.terraformBucketKey }}
            aws s3 cp s3://${{ env.terraformBucket }}/${{ env.terraformBucketKey }} $state_file_name
            instance_id=$(terraform output --json -state=$state_file_name | jq -r '.instance_id.value')
            echo "INSTANCE_ID=$instance_id" >> "$GITHUB_OUTPUT"   
            echo $INSTANCE_ID

      - name: creating working directory
        uses: adexltd/aws-ssm-send-command@master
        id: create-directory 
        with:
          aws-region: ${{ env.depRegion }}
          aws-access-key-id: ${{ steps.creds.outputs.aws-access-key-id }}
          aws-secret-access-key: ${{ steps.creds.outputs.aws-secret-access-key }}
          aws-session-token: ${{ steps.creds.outputs.aws-session-token }}
          instance-ids: ${{ steps.get-instance-id.outputs.INSTANCE_ID }}

          working-directory: /home/ubuntu/
          command: mkdir /home/ubuntu/ama


      - name: Transferring code from s3 to ec2 instance
        uses: adexltd/aws-ssm-send-command@master
        id: tansfer-code
        with:
          aws-region: ${{ env.depRegion }}
          aws-access-key-id: ${{ steps.creds.outputs.aws-access-key-id }}
          aws-secret-access-key: ${{ steps.creds.outputs.aws-secret-access-key }}
          aws-session-token: ${{ steps.creds.outputs.aws-session-token }}
          instance-ids: ${{ steps.get-instance-id.outputs.INSTANCE_ID }}

          working-directory: home/ubuntu/ama
          command: aws s3 cp s3://${{ steps.get-bucket-name.outputs.BUCKET_NAME }}/codebase/ /home/ubuntu/ama --recursive

      - name: Waiting for 30 seconds
        run: sleep 30  

  deploy:
    needs: copy
    runs-on: ubuntu-latest
    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: creds
        with:
          role-to-assume: arn:aws:iam::${{ env.awsAccountNumber }}:role/Github-OIDC-role
          role-session-name: OIDCSession
          aws-region: ${{ env.awsRegion }}
          output-credentials: true

      - name: Terraform Initialize
        id: init
        run: |
          cd ${{ env.terraformWorkDir }}
          terraform init -backend-config="bucket=${{ env.terraformBucket }}" -backend-config="dynamodb_table=${{ env.terraformDynamo }}" -backend-config="key=${{ env.terraformBucketKey}}" -backend-config="region=${{ env.awsRegion }}" -backend-config="acl=${{ env.terraformS3Acl }}" -backend-config="encrypt=${{ env.terraformS3Encryption }}"

      - name: Get the instance-id
        uses: mathiasvr/command-output@v1
        id: get-instance-id
        with:
          run: |
            state_file_name=${{ env.terraformBucketKey }}
            aws s3 cp s3://${{ env.terraformBucket }}/${{ env.terraformBucketKey }} $state_file_name
            instance_id=$(terraform output --json -state=$state_file_name | jq -r '.instance_id.value')
            echo "INSTANCE_ID=$instance_id" >> "$GITHUB_OUTPUT"
            echo $INSTANCE_ID

      - name: Run script
        uses: adexltd/aws-ssm-send-command@master
        id: run-bash-script
        with:
          aws-region: ${{ env.depRegion }}
          aws-access-key-id: ${{ steps.creds.outputs.aws-access-key-id }}
          aws-secret-access-key: ${{ steps.creds.outputs.aws-secret-access-key }}
          aws-session-token: ${{ steps.creds.outputs.aws-session-token }}
          instance-ids: ${{ steps.get-instance-id.outputs.INSTANCE_ID }}

          working-directory: /home/ubuntu/ama
          command: /bin/sh /home/ubuntu/ama/deploy.sh

